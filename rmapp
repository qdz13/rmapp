#!/bin/bash
# shellcheck disable=SC2001

progname="rmapp"
version=1.0.0

if ! [[ "$OSTYPE" =~ ^darwin ]]; then
	echo "This program is only works on macOS." >&2
	exit 1
fi

usage() {
	echo "Usage: $progname [-chsv] [string]" >&2
	cat >&2 <<-'EOF'

		Options:
		  -c, --check   Display all matched files and exit
		  -s, --silent  Silent mode (Suppress normal output)
		  -h, --help    Display this help message and exit
		  -v, --version Display version information and exit
		EOF
}

optend=false
mode=normal
declare keyword
while [ $# -ne 0 ]; do
	if [ "$optend" = true ]; then
		keyword="$1"
		shift
	else
		case "$1" in
			-c|--check)
				mode=check
				shift
				;;
			-s|--silent)
				mode=silent
				keyword="$1"
				shift
				;;
			-h|--help)
				usage
				exit
				;;
			-v|--version)
				echo "$progname $version"
				exit
				;;
			--)
				optend=true
				shift
				;;
			-*)
				echo "$progname: Unknown option: \"$1\"" >&2
				exit 1
				;;
			*)
				keyword="$1"
				shift
				;;
		esac
	fi
done

oldifs="$IFS"
IFS=$'\n'

check() {
	local result
	result=$(find "$1" -iname "*$keyword*" -maxdepth 1 -print 2> /dev/null)
	if [ -n "$result" ]; then
		for line in $result; do
			items[count]="$line"
			count=$((count + 1))
		done
	fi
}

count=0
declare -a items

check "$HOME/.cache"
check "$HOME/.config"
check "$HOME/.local/share"
check "$HOME/.local/state"
check "$HOME/Library"
check "$HOME/Library/Application Scripts"
check "$HOME/Library/Application Support"
check "$HOME/Library/Application Support/CrashReporter"
check "$HOME/Library/Caches"
check "$HOME/Library/Containers"
check "$HOME/Library/Group Containers"
check "$HOME/Library/HTTPStorages"
check "$HOME/Library/Internet Plug-Ins"
check "$HOME/Library/LaunchAgents"
check "$HOME/Library/Logs"
check "$HOME/Library/Logs/DiagnosticReports"
check "$HOME/Library/Preferences"
check "$HOME/Library/Preferences/ByHost"
check "$HOME/Library/Saved Application State"
check "$HOME/Library/WebKit"
check "/Library"
check "/Library/Application Support"
check "/Library/Application Support/CrashReporter"
check "/Library/Caches"
check "/Library/Extensions"
check "/Library/Internet Plug-Ins"
check "/Library/LaunchAgents"
check "/Library/LaunchDaemons"
check "/Library/Logs"
check "/Library/Logs/DiagnosticReports"
check "/Library/Preferences"
check "/Library/PrivilegedHelperTools"
check "/private/var/db/receipts"
check "/usr/local/bin"
check "/usr/local/etc"
check "/usr/local/opt"
check "/usr/local/sbin"
check "/usr/local/share"
check "/usr/local/var"

IFS="$oldifs"

if [ "$mode" = check ]; then
	for filename in "${items[@]}"; do
		sed "s|^$HOME|~|" <<< "$filename"
	done
	exit
fi

remove() {
	osascript -e 'tell application "Finder" to delete POSIX file "'"$1"\" > /dev/null
}

if [ "$mode" = silent ]; then
	for filename in "${items[@]}"; do
		remove "$filename"
	done
	exit
fi

if [ ${#items[@]} -gt $(($(tput lines) - 1)) ]; then
	for filename in "${items[@]}"; do
		echo "$filename"
	done
	echo "$progname: Too many items!" >&2
	exit
fi

[ ${#items[@]} -eq 0 ] && exit

count=0

for filename in "${items[@]}"; do
	count=$((count + 1))
	echo -n "$count "
	sed "s|^$HOME|~|" <<< "$filename"
done

read -r -p "Enter the number of the files/dirs you want to delete: " answer

if [ -z "$answer" ]; then
	exit
elif [ "$answer" = "*" ] || [ "$answer" = all ]; then
	for filename in "${items[@]}"; do
		remove "$filename"
	done
	exit
fi

for number in $answer; do
	if [[ "$number" =~ ^[1-9][0-9]?$ ]] && [ "$number" -le ${#items[@]} ]; then
		[ -e "${items[$((number - 1))]}" ] && remove "${items[$((number - 1))]}"
	else
		echo "$progname: Invalid choice: $number" >&2
	fi
done
